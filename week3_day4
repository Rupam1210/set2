// import static org.junit.jupiter.api.Assertions.assertEquals;

// import org.junit.jupiter.api.Test;

abstract class Pen{
    abstract void write();
    abstract void refill();
}
abstract class telephone{
    abstract void lift();
    abstract void disconnected();
}
class smartphone extends telephone{
  public void lift(){
      System.out.println("phone is lifting....");
  }
  public void disconnected(){
      System.out.println("It is disconnected...");
  }
  public void browseInternet() {
    System.out.println("Browsing internet on SmartPhone...");
  }
  public void takePicture() {
    System.out.println("Taking picture with SmartPhone..");
  }
}

class FountainPen extends Pen{
    void write(){
        System.out.println("Write");
    }
    void refill(){
        System.out.println("Refill");
    }
    void changeNib(){
        System.out.println("Changing the nib");
    }
}
class Monkey{
    void jump(){
        System.out.println("Jumping...");
    }
    void bite(){
        System.out.println("Biting...");
    }
}

interface BasicAnimal{
    void eat();
    void sleep();
}
interface Tvremote{
    void on();
    void changechannel();
}
interface smartTvremote extends Tvremote{
    void backbtn();
    void wifibtn();
}
class remote implements smartTvremote{
  public void on() {
      System.out.println("Tv is on....");
  }
  public void changechannel() {
      System.out.println("channel is changing..");
  }
  public void wifibtn() {
      System.out.println("Tv's wifi setting...");
  }
  public void backbtn() {
      System.out.println("channel is back to recent one...");
  }
}

class Human extends Monkey implements BasicAnimal{
    void speak(){
        System.out.println("Hello sir!");
    }

    @Override
    public void eat() {
        System.out.println("Eating");
    }

    @Override
    public void sleep() {
        System.out.println("Sleeping");
    }
}

public class Main {
    public static void main(String[] args) {
        // Q1 + Q2
      //-------------------------
        // Problem 1
      //-----------------------
      System.out.println("Problem 1:  Create an abstract class pen with methods write () and refill () as abstract methods  ");
        System.out.println();
        FountainPen pen = new FountainPen();
         System.out.println("Class is created with a object name :pen ");
       System.out.println();
      //-------------------------
        // Problem 2
      //-----------------------
      System.out.println("Problem 2:  Use the pen class from Q1 to create a concrete class fountain pen with additional method change Nib () ");
        System.out.println();
        pen.changeNib();
       System.out.println();
      //-------------------------
        // Problem 3
      //-----------------------
      System.out.println("Problem 3: Create a class monkey with jump ( ) and bite ( ) methods Create a class human whichinherits this monkey class and implements basic animal interface with eat ( ) and sleep methods  ");
        System.out.println();
      BasicAnimal lovish = new Human();
      // lovish.speak(); --> error
      lovish.eat();
      lovish.sleep();
        // Human raj = new Human();
        // raj.sleep();
       System.out.println();
      //-------------------------
        // Problem 4
      //-----------------------
      System.out.println("Problem 4:  Create a class telephone with ( ) , lift ( ) and disconnected ( ) methods as abstract methods create another class smart telephone and demonstrate polymorphism   ");
        System.out.println();
      telephone tl=new smartphone();
      tl.lift();
      tl.disconnected();
      System.out.println("We create object by extend class telephone and limit the access if we define the object with smartphone then ");
      smartphone sm=new smartphone();
      sm.browseInternet();
       System.out.println();
      //-------------------------
        // Problem 5
      //-----------------------
      System.out.println("Problem 5: Demonstrate polymorphism using using monkey  class from Q3   ");
        System.out.println();
      Monkey m1 = new Human();
      m1.jump();
      m1.bite();
       System.out.println();
      //-------------------------
        // Problem 6
      //-----------------------
      System.out.println("Problem 6: Create an interface TVremote and use it to inherit another interface smart TVremote   ");
        System.out.println();       
       System.out.println("smarttvremote is inherit from another class");
       remote rm=new remote();
       System.out.println();
      //-------------------------
        // Problem 7
      //-----------------------
      System.out.println("Problem 7: Create a class TV which implements TVremote interface from Q6  ");
        System.out.println();
       rm.on();
      rm.changechannel();
      rm.wifibtn();
      rm.backbtn();
       System.out.println();
       

        
       
        // m1.speak(); --> Cannot use speak method because the reference is monkey which does not have speak method

        

    }
}
// Create an abstract class pen with methods write () and refill () as abstract methods 
// Use the pen class from Q1 to create a concrete class fountain pen with additional method change Nib ()
// Create a class monkey with jump ( ) and bite ( ) methods Create a class human whichinherits this monkey class and implements basicanimal interface with eat ( ) and sleep methods 
// Create a class telephone with ( ) , lift ( ) and disconnected ( ) methods as abstract methods create another class smart telephone and demonstrate polymorphism 
// Demonstrate polymorphism using using monkey  class from Q3 
// Create an interface TVremote and use it to inherit another interface smart TVremote 
// Create a class TV which implements TVremote interface from Q6
